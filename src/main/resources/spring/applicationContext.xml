<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx
		   http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
		   http://www.springframework.org/schema/task
		   http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <context:component-scan base-package="com.estore">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入mq的配置-->
    <import resource="classpath:RabbitMQ.xml" />

    <!-- 构建一个定时器专门，模拟mq 的调用服务 -->
    <task:annotation-driven/>

    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 2.数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- c3p0连接池的私有属性 -->
        <property name="maxActive" value="30"/>
        <property name="minIdle" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="defaultAutoCommit" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="maxWait" value="10000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="connectionErrorRetryAttempts" value="2"/>
    </bean>
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driver2}"/>
        <property name="url" value="${jdbc.url2}"/>
        <property name="username" value="${jdbc.username2}"/>
        <property name="password" value="${jdbc.password2}"/>

        <!-- c3p0连接池的私有属性 -->
        <property name="maxActive" value="30"/>
        <property name="minIdle" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="defaultAutoCommit" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="maxWait" value="10000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="connectionErrorRetryAttempts" value="2"/>
    </bean>
    <!--配置动态数据源-->
    <bean id="dynamicDataSource" class="com.estore.mysqlRouter.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="ds1" value-ref="dataSource"/>
                <entry key="ds2" value-ref="dataSource2"/>
            </map>
        </property>
        <!--默认数据源-->
        <property name="defaultTargetDataSource" ref="dataSource"/>
    </bean>

    <!-- 配置Mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis_config.xml"/>
        <property name="dataSource" ref="dynamicDataSource"></property>
        <property name="typeAliasesPackage" value="com.estore.bean"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 配置一个可以批量生产的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!--配置redis-->
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:redis.properties"/>
    </bean>
    <!-- jedis 配置-->
<!--    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        &lt;!&ndash;最大空闲数&ndash;&gt;
        <property name="maxIdle" value="${redis.maxIdle}"/>
        &lt;!&ndash;最大建立连接等待时间&ndash;&gt;
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        &lt;!&ndash;是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个&ndash;&gt;
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
    </bean>-->
    <bean id="jedisCluster" class="com.estore.redis.JedisClusterFactory">
        <property name="addressConfig">
            <value>classpath:redis.properties</value>
        </property>
        <property name="addressKeyPrefix" value="cluster"/>   <!--  属性文件里  key的前缀 -->
        <property name="timeout" value="300000"/>
        <property name="maxRedirections" value="6"/>
        <!--<property name="genericObjectPoolConfig" ref="poolConfig"/>-->
    </bean>

    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- mybatis中别名包 -->
        <property name="basePackage" value="com.estore.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 事务控制 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"></property>
    </bean>

    <!-- 开启基于注解的事务，使用xml配置形式的事务 -->
    <aop:config>
        <!-- 切入点表达式 -->
        <aop:pointcut expression="execution(public * com.estore.service..*(..))" id="txPoint"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
        <aop:aspect ref="dataSourceExchange">
            <aop:pointcut id="dataSourcePointcut" expression="execution(* com.estore.service.impl.*ServiceImpl.*(..))"/>
            <aop:before pointcut-ref="dataSourcePointcut" method="before"/>
            <!--<aop:after pointcut-ref="dataSourcePointcut" method="after"/>-->
        </aop:aspect>
    </aop:config>
    <!-- 配置事务增强，事务如何启动 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 切入点所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 以get开始的所有方法 -->
            <tx:method name="query*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <bean id="dataSourceExchange" class="com.estore.mysqlRouter.DataSourceExchange"/>
    <!-- Spring配置：数据源；与mybatis整合；事务控制 -->

</beans>